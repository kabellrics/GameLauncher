// <auto-generated />
using System;
using GameLauncher.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GameLauncher.DAL.Migrations
{
    [DbContext(typeof(GameLauncherContext))]
    [Migration("20240626150703_CleanLookupV6")]
    partial class CleanLookupV6
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.6");

            modelBuilder.Entity("GameLauncher.Models.Collection", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CodeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Fanart")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.ToTable("Collections");
                });

            modelBuilder.Entity("GameLauncher.Models.CollectionItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CollectionID")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ItemID")
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("CollectionID");

                    b.HasIndex("ItemID");

                    b.ToTable("CollectiondItems");
                });

            modelBuilder.Entity("GameLauncher.Models.Develloppeur", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Develloppeurs");
                });

            modelBuilder.Entity("GameLauncher.Models.Editeur", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Editeurs");
                });

            modelBuilder.Entity("GameLauncher.Models.Genre", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("GameLauncher.Models.Item", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddingDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Artwork")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Banner")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Cover")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LUPlatformesId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("LUProfileId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastStartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("NbStart")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StoreId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Video")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("GameLauncher.Models.ItemDev", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DevelloppeurID")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ItemID")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("DevelloppeurID");

                    b.HasIndex("ItemID");

                    b.ToTable("DevdItems");
                });

            modelBuilder.Entity("GameLauncher.Models.ItemEditeur", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EditeurID")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ItemID")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("EditeurID");

                    b.HasIndex("ItemID");

                    b.ToTable("EditeurdItems");
                });

            modelBuilder.Entity("GameLauncher.Models.ItemGenre", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GenreID")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ItemID")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("GenreID");

                    b.HasIndex("ItemID");

                    b.ToTable("GenredItems");
                });

            modelBuilder.Entity("GameLauncher.Models.LUEmulateur", b =>
                {
                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("Emulateurs");
                });

            modelBuilder.Entity("GameLauncher.Models.LUPlatformes", b =>
                {
                    b.Property<string>("Codename")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Databases")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Emulators")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Guid")
                        .HasColumnType("TEXT");

                    b.Property<long?>("IgdbId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("Platformes");
                });

            modelBuilder.Entity("GameLauncher.Models.LUProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageExtensions")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Platforms")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProfileFiles")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StartupArguments")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StartupExecutable")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("GameLauncher.Models.CollectionItem", b =>
                {
                    b.HasOne("GameLauncher.Models.Collection", null)
                        .WithMany("Items")
                        .HasForeignKey("CollectionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameLauncher.Models.Item", null)
                        .WithMany("Collections")
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameLauncher.Models.ItemDev", b =>
                {
                    b.HasOne("GameLauncher.Models.Develloppeur", "Develloppeur")
                        .WithMany("Items")
                        .HasForeignKey("DevelloppeurID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameLauncher.Models.Item", "Item")
                        .WithMany("Develloppeurs")
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Develloppeur");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("GameLauncher.Models.ItemEditeur", b =>
                {
                    b.HasOne("GameLauncher.Models.Editeur", "Editeur")
                        .WithMany("Items")
                        .HasForeignKey("EditeurID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameLauncher.Models.Item", "Item")
                        .WithMany("Editeurs")
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Editeur");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("GameLauncher.Models.ItemGenre", b =>
                {
                    b.HasOne("GameLauncher.Models.Genre", "Genre")
                        .WithMany("Items")
                        .HasForeignKey("GenreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameLauncher.Models.Item", "Item")
                        .WithMany("Genres")
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("GameLauncher.Models.Collection", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("GameLauncher.Models.Develloppeur", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("GameLauncher.Models.Editeur", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("GameLauncher.Models.Genre", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("GameLauncher.Models.Item", b =>
                {
                    b.Navigation("Collections");

                    b.Navigation("Develloppeurs");

                    b.Navigation("Editeurs");

                    b.Navigation("Genres");
                });
#pragma warning restore 612, 618
        }
    }
}
